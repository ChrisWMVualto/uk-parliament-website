@using System.Web.Optimization
@using Date.Extensions
@using UKP.Website.Application
@using UKP.Website.Models.Event
@using UKP.Website.Service.Model
@model EventViewModel

@{
    ViewBag.Title = Model.VideoModel.Event.Title;
    ViewBag.FBTitle = "Parliamentlive.tv";
    ViewBag.Description = Model.VideoModel.Event.Title;
    var showAudioButton = EventViewModel.ShowAudioOnly(Model.VideoModel) ? string.Empty : "hidden";
    var showLogTab = "invisible";
    var stackTab = "active";
    var indexMessageClass = "hidden";

    if (Model.VideoModel.Event.States.PlayerState != PlayerEventState.PRELIVE && Model.VideoModel.LogMoments.ContainsLogMoments)
    {
        if (Model.DefaultToStackTab)
        {
            showLogTab = "";
            stackTab = "active";
        }
        else
        {
            showLogTab = "active";
            stackTab = "";
        }
    }

    if (Model.VideoModel.Event.States.RecordingState == RecordingEventState.RECORDING && !Model.IsClipped)
    {
        indexMessageClass = "";
    }
}

<div class="container main-container">
    @Html.Hidden("ClipRequested", false)
    @Html.Hidden("MeetingStartTime", Model.VideoModel.Event.ActualLiveStartTime.ToISO8601String() ?? Model.VideoModel.Event.DisplayStartDate.ToISO8601String())
    @Html.Hidden("MeetingEndTime", Model.VideoModel.Event.DisplayEndDate.ToISO8601String())
    @Html.Hidden("eventId", Model.VideoModel.Event.Id)
    @Html.Hidden("getVideoUrl", @Url.Action(MVC.Event.GetMainVideo(Model.VideoModel.Event.Id, Model.VideoModel.RequestedInPoint.ToISO8601String(), Model.VideoModel.RequestedOutPoint.ToISO8601String())))
    @Html.Hidden("ProgramDateTime")
    @Html.Hidden("ContainsLogMoments", Model.VideoModel.LogMoments.ContainsLogMoments)
    @Html.Hidden("DefaultToStackTab", Model.DefaultToStackTab)
    @Html.Hidden("LiveLogging", Model.VideoModel.Event.States.RecordingState == RecordingEventState.RECORDING)
    <div id="downloadFormContainer" data-load-url="@Url.Action(MVC.Event.DownloadForm(Model.VideoModel.Event.Id, Model.VideoModel.RequestedInPoint.ToISO8601String(), Model.VideoModel.RequestedOutPoint.ToISO8601String()))">
        @Html.Partial(MVC.Event.Views._DownloadForm, Model.VideoModel)
    </div>
    <div class="row">
        <div class="col-md-12">
            <header class="title-main title-player">
                <h2><i class="fa fa-play-solid fa-lg"></i> <span>Player</span>
                </h2><a href="@Configuration.GetRssUrl" target="_blank" class="rss-link pull-right hidden-xs">RSS <i class="fa fa-rss fa-2x"></i></a></header>
        </div>
        <div class="col-md-12 page-title-bar">
            <div id="eventTitleContainer" data-load-url="@Url.Action(MVC.Event.EventTitle(Model.VideoModel.Event.Id, Model.VideoModel.RequestedInPoint.ToISO8601String(), Model.VideoModel.RequestedOutPoint.ToISO8601String()))" class="row">
                @Html.Action(MVC.Event.EventTitle(Model.VideoModel.Event.Id, Model.VideoModel.RequestedInPoint.ToISO8601String(), Model.VideoModel.RequestedOutPoint.ToISO8601String()))
            </div>
        </div>
        <div class="col-md-12">
            <div class="row">
                <div class="col-md-7">
                    <div id="videoContainer" class="video-container">
                        @Html.Raw(Model.VideoModel.ScriptableEmbedCode)
                    </div>
                    <div class="player-tabs" id="player-tabs">
                        <div>
                            <ul class="nav nav-tabs" role="tablist">
                                <li class="active" id="share-tab"><a href="#share" role="tab" data-toggle="tab"><span class="hidden-xs">share</span> <i class="fa fa-share fa-2x"></i></a></li>
                                <li id="download-tab"><a href="#download" role="tab" data-toggle="tab"><span class="hidden-xs">download</span> <i class="fa fa-player-download fa-2x"></i></a></li>
                                <li id="info-tab"><a href="#info" role="tab" data-toggle="tab" class="info-tab"><span class="hidden-xs">info</span> <i class="fa fa-help fa-2x"></i></a></li>
                            </ul>
                            <button id="audioToggle" type="button" class="btn audio-toggle @showAudioButton" data-load-url="@Url.Action(MVC.Event.ShowAudioOnly(Model.VideoModel.Event.Id, Model.VideoModel.RequestedInPoint.ToISO8601String(), Model.VideoModel.RequestedOutPoint.ToISO8601String()))" data-audioonly-on-state="@Model.VideoModel.RequestedAudioOnly" data-toggle="button"></button>
                        </div>
                        <div class="tab-content">
                            @Html.Partial(MVC.Event.Views._Share, Model)
                            <div class="tab-pane fade" data-load-url="@Url.Action(MVC.Event.DownloadTab(Model.VideoModel.Event.Id))" id="download">
                                @Html.Partial(MVC.Event.Views._Download, new DownloadViewModel(Model.VideoModel))
                            </div>
                            @Html.Partial(MVC.Event.Views._Info, Model)
                        </div>
                    </div>
                </div>
                <div class="col-md-5">
                    @if (!Model.VideoModel.Event.LegacyMeetingId.HasValue && Model.VideoModel.Stacks.Any())
                    {
                        <div class="row">
                            <ul class="col-md-12 stack-and-logs-tabs" role="tablist">
                                <li id="stackTab" class="@stackTab" data-refresh-stack-url="@Url.Action(MVC.Event.Stack(Model.VideoModel.Event.Id, Model.VideoModel.RequestedInPoint.ToISO8601String(), Model.VideoModel.RequestedOutPoint.ToISO8601String()))">
                                    <a href="#stacks" role="tab" data-toggle="tab"><span>Agenda</span></a>
                                </li>
                                <li id="logTab" class="@showLogTab"
                                    data-load-new-log-url="@Url.Action(MVC.Event.EventLogsBetween(Model.VideoModel.Event.Id, @in: Model.VideoModel.RequestedInPoint.ToISO8601String(), @out: Model.VideoModel.RequestedOutPoint.ToISO8601String()))"
                                    data-refresh-log-url="@Url.Action(MVC.Event.Logs(Model.VideoModel.Event.Id, Model.VideoModel.RequestedInPoint.ToISO8601String(), Model.VideoModel.RequestedOutPoint.ToISO8601String()))">
                                    <a href="#logs" role="tab" data-toggle="tab"><span>Index</span></a>
                                </li>
                            </ul>
                        </div>
                        <div class="tab-content player-tabs-content">
                            <div class="tab-pane fade active in stacks-logs" id="stacks">
                                <ul class="stack-list">
                                    @Html.Action(MVC.Event.Stack(Model.VideoModel.Event.Id, Model.VideoModel.RequestedInPoint.ToISO8601String(), Model.VideoModel.RequestedOutPoint.ToISO8601String()))
                                </ul>
                            </div>
                            <div class="tab-pane fade stacks-logs" id="logs">
                                <div id="index-message" class="@indexMessageClass">
                                    <p>Note: Latency in the video stream means index items will appear first.</p>
                                    <p><button id="seekToLiveButton" type="submit" class="btn btn-seek-to-live-grey">Back to live <i class="fa fa-play"></i></button>
                                    </p>
                                </div>
                                <ul class="log-list">
                                    @Html.Action(MVC.Event.Logs(Model.VideoModel.Event.Id, Model.VideoModel.RequestedInPoint.ToISO8601String(), Model.VideoModel.RequestedOutPoint.ToISO8601String()))
                                </ul>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section scripts {
    @if (Model.VideoModel.Event.States.RecordedState.Equals(RecordedEventState.NEW) || Model.VideoModel.Event.States.RecordedState.Equals(RecordedEventState.HOLD))
    {
        @Scripts.Render("~/bundles/theoJs")
    }
    else
    {
        @Scripts.Render("~/bundles/groovyJs")
    }
    @Scripts.Render("~/bundles/eventJs")
    <script src="~/signalr/hubs"></script>
    <script src="https://www.google.com/recaptcha/api.js" async defer></script>
}
