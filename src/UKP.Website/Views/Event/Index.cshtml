@using System.Web.Optimization
@using Date.Extensions
@using UKP.Website.Application
@using UKP.Website.Models.Event
@using UKP.Website.Service.Model
@model EventViewModel

@{
    ViewBag.Title = Model.VideoModel.Event.Title;
    ViewBag.FBTitle = "Parliamentlive.tv";
    ViewBag.Description = Model.VideoModel.Event.Title;
    var showAudioButton = EventViewModel.ShowAudioOnly(Model.VideoModel) ? string.Empty : "hidden";
    var showLogTab = "invisable";
    if (Model.VideoModel.Event.States.PlayerState != PlayerEventState.PRELIVE && Model.VideoModel.LogMoments.ContainsLogMoments)
    {
        showLogTab = "";
    }

}


<div class="container main-container">

    @Html.Hidden("eventId", Model.VideoModel.Event.Id)
    @Html.Hidden("getVideoUrl", @Url.Action(MVC.Event.GetMainVideo(Model.VideoModel.Event.Id, Model.VideoModel.RequestedInPoint.ToISO8601String(), Model.VideoModel.RequestedOutPoint.ToISO8601String())))
    @Html.Hidden("ProgramDateTime")
    @Html.Hidden("ContainsLogMoments", Model.VideoModel.LogMoments.ContainsLogMoments)
    <div class="row">
        <div class="col-md-12">
            <header class="title-main title-player"><h2><i class="fa fa-play-solid fa-lg"></i> <span>Player</span></h2><a href="@Configuration.GetRssUrl" target="_blank" class="rss-link pull-right hidden-xs">RSS <i class="fa fa-rss fa-2x"></i></a></header>
        </div>
        <div class="col-md-12 page-title-bar">
            <div id="eventTitleContainer" data-load-url="@Url.Action(MVC.Event.EventTitle(Model.VideoModel.Event.Id, Model.VideoModel.RequestedInPoint.ToISO8601String(), Model.VideoModel.RequestedOutPoint.ToISO8601String()))" class="row">
                @Html.Action(MVC.Event.EventTitle(Model.VideoModel.Event.Id, Model.VideoModel.RequestedInPoint.ToISO8601String(), Model.VideoModel.RequestedOutPoint.ToISO8601String()))
            </div>
        </div>
        <div class="col-md-12">
            <div class="row">
                <div class="col-md-7">
                    <div id="videoContainer" class="video-container">
                        @Html.Raw(Model.VideoModel.ScriptableEmbedCode)
                    </div>

                    <!--start: player tabs-->
                    <!-- Nav tabs -->
                    <div class="player-tabs">
                        <div>
                            <ul class="nav nav-tabs" role="tablist">
                                <li class="active" id="info-tab"><a href="#info" role="tab" data-toggle="tab" class="info-tab"><span class="hidden-xs">info</span> <i class="fa fa-help fa-2x"></i></a></li>
                                <li id="share-tab"><a href="#share" role="tab" data-toggle="tab"><span class="hidden-xs">share</span> <i class="fa fa-share fa-2x"></i></a></li>
                            </ul>
                            <button id="audioToggle" type="button" class="btn audio-toggle @showAudioButton" data-load-url="@Url.Action(MVC.Event.ShowAudioOnly(Model.VideoModel.Event.Id, Model.VideoModel.RequestedInPoint.ToISO8601String(), Model.VideoModel.RequestedOutPoint.ToISO8601String()))" data-audioonly-on-state="@Model.VideoModel.RequestedAudioOnly" data-toggle="button"></button>
                        </div>
                        <!-- Tab panes -->
                        <div class="tab-content">
                            @Html.Partial(MVC.Event.Views._Info, Model)
                            @Html.Partial(MVC.Event.Views._Share, Model)
                        </div>
                    </div>
                    <!--end: player tabs-->
                </div>
                <div class="col-md-5">
                    @if (!Model.VideoModel.Event.LegacyMeetingId.HasValue && Model.VideoModel.Stacks.Any())
                    {
                        
                        <div class="row ">
                            <ul class="col-md-12 stack-and-logs-tabs">
                                <li class="active">
                                    <a href="#stacks" data-toggle="tab"><span>STACK</span>&nbsp;<i class="fa fa-bars fa-2x"></i></a>
                                </li>
                                <li id="logTab" class="@showLogTab"
                                    data-load-new-log-url="@Url.Action(MVC.Event.EventLogsBetween(Model.VideoModel.Event.Id, @in: Model.VideoModel.RequestedInPoint.ToISO8601String(), @out: Model.VideoModel.RequestedOutPoint.ToISO8601String()))"
                                    data-refresh-log-url="@Url.Action(MVC.Event.Logs(Model.VideoModel.Event.Id, Model.VideoModel.RequestedInPoint.ToISO8601String(), Model.VideoModel.RequestedOutPoint.ToISO8601String()))">
                        <a href="#logs" data-toggle="tab"><span>LOG</span>&nbsp; <i class="fa fa-list-ul"></i></a>
                                </li>


                            </ul>
                        </div>

                        <div class="tab-content player-tabs-content">
                            <div class="tab-pane fade active in stacks-logs" id="stacks">
                                @Html.Action(MVC.Event.Stack(Model.VideoModel.Event.Id, Model.VideoModel.RequestedInPoint.ToString(), Model.VideoModel.RequestedOutPoint.ToString()))
                            </div>
                            <div class="tab-pane fade stacks-logs" id="logs">
                                <div class="log-list">

                                    @Html.Action(MVC.Event.Logs(Model.VideoModel.Event.Id, Model.VideoModel.RequestedInPoint.ToString(), Model.VideoModel.RequestedOutPoint.ToString()))

                                </div>
                            </div>

                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section scripts {
    @Scripts.Render("~/bundles/eventJs")
    <script src="~/signalr/hubs"></script>
}